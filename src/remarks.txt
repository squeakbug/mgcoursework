1) Модель, контроллер, представление должны иметь возможность независемо друг от друга развиваться
    - Функциональность добавления/удаления/редактирования источников света сильно связывает модель и представление с контроллером

2) Можно было не добавлять id для каждой записи, а можно было просто удалять по указателям, так как Qt api это и предполагает

3) При реализации интерфейса следовало бы воспользоваться возможность посылать сигналы. Однако в связи с тем, что
    а) Я не предполагаю, что источников будет много (это потребуется, если точечные источники потребуется добавить в сцену)
    б) Я предполагаю, что операция удаления источника света будет выполняться реже, чем операция изменения данных об источнике света,
        которая потребует генерации события на получения индекса источника света из глобального виджета

4) Удаление сделано некрасиво: 
    а) создается каждый раз команда для каждого источника света (Решение: можно добавить команду RemoveAllLightSourceFromScene)
    б) [Это касается всей реализации] нет никакой гарантии, что если поменяется бизнес-логика программы (сцены, в которой хранятся источники),
        то интерфейс не придется менять. Все завязано на предположении, что сцена - коллекция с таким же динамическим массивом, что и в интерфейсе.
        Эта проблема смягчается тем, что работа со сценой ведется через прослойку из команд. Следовательно, если изменится бизнес-логика программы,
        то потребуется изменить только команды.

5) Нужно было сразу определиться со стилем текста

6) Продумывать интерфейс классов надо было еще на этапе проектирования
    (не стоит забывать, что noexcept/constexp/const/virtual/override/const - это тоже интерфейс)

7) Не получилось сделать так, чтобы у SceneObject метод setId мог вызываться только объектами класса Scene

8) Название некоторых комманд слишком длинные для понимания того, что они делают без заглядывания в реализацию

9) Помни, возвращая константные ссылки ты не копируешь данные!!!